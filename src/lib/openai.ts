import OpenAI from 'openai';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export interface SummaryRequest {
  title: string;
  description: string;
  transcript?: string;
  channelName: string;
  duration: string;
}

export async function generateVideoSummary(request: SummaryRequest): Promise<string | null> {
  try {
    const { title, description, transcript, channelName, duration } = request;
    
    // Build the prompt based on available content
    let content = `Canal: ${channelName}\n`;
    content += `Título: ${title}\n`;
    content += `Duração: ${duration}\n\n`;
    
    if (description) {
      content += `Descrição: ${description}\n\n`;
    }
    
    if (transcript && transcript.length > 0) {
      content += `Transcrição: ${transcript}\n\n`;
    }
    
    const prompt = `Você é um especialista em criar resumos de vídeos do YouTube para WhatsApp. 

Analise o conteúdo do vídeo abaixo e crie um resumo conciso e útil seguindo estas diretrizes:

1. **Tamanho**: Entre 150-300 palavras
2. **Estrutura**: 
   - Começo: Contexto rápido do que é o vídeo
   - Meio: 3-5 pontos principais em bullet points
   - Final: Conclusão ou insight chave
3. **Tom**: Conversacional e direto, como se fosse enviado no WhatsApp
4. **Linguagem**: Português brasileiro, informal mas informativo
5. **Formato**: Use emojis moderadamente para melhor leitura

CONTEÚDO DO VÍDEO:
${content}

RESUMO:`;

    const completion = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        {
          role: "system",
          content: "Você é um especialista em criar resumos de vídeos do YouTube para WhatsApp. Seja conciso, útil e use linguagem brasileira informal."
        },
        {
          role: "user",
          content: prompt
        }
      ],
      max_tokens: 500,
      temperature: 0.7,
    });

    const summary = completion.choices[0]?.message?.content?.trim();
    
    if (!summary) {
      console.error('No summary generated by OpenAI');
      return null;
    }
    
    console.log(`✅ Summary generated: ${summary.length} characters`);
    return summary;
    
  } catch (error) {
    console.error('Error generating summary with OpenAI:', error);
    return null;
  }
}

export async function testOpenAIConnection(): Promise<boolean> {
  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        {
          role: "user",
          content: "Responda apenas: 'Conexão OpenAI funcionando!'"
        }
      ],
      max_tokens: 10,
    });
    
    const response = completion.choices[0]?.message?.content?.trim();
    console.log('OpenAI test response:', response);
    return !!response;
    
  } catch (error) {
    console.error('OpenAI connection test failed:', error);
    return false;
  }
}